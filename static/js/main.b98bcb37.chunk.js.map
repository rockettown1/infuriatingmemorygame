{"version":3,"sources":["assets/ugandanKnuckles.jpeg","cards/Card.js","cards/Cards.js","App.js","serviceWorker.js","index.js","assets/tum.jpg","assets/luigi.png","assets/bowser.jpg","assets/mario-pose4.png"],"names":["module","exports","Card","props","flipback","useState","isFlipped","changeFlip","console","log","flip","setTimeout","handleFlip","click","id","image","flipDirection","Container","onClick","ContainerBack","Image","src","styled","div","img","Cards","Board","pics","map","card","index","key","matchedSaved","App","state","title","message","picsArray","Mario","UgKnuck","Bowser","Luigi","Toad","match","images","lives","allFound","clickHandler","matchedArray","imageCheck","push","setState","length","Set","pop","resetButton","this","Win","Main","Footer","Warning","Component","h3","h1","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b98bcb37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ugandanKnuckles.e5b3de9c.jpeg\";","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport ReactCardFlip from \"react-card-flip\";\n\nexport default function Card(props) {\n  const [isFlipped, changeFlip] = useState(false);\n\n  console.log(props.flip);\n  let flipback;\n  if (props.flip) {\n    setTimeout(() => {\n      flipback = false;\n      changeFlip(false);\n    }, 750);\n  }\n\n  const handleFlip = () => {\n    changeFlip(!isFlipped);\n    props.click(props.id, props.image);\n  };\n\n  return (\n    <ReactCardFlip isFlipped={flipback || isFlipped} flipDirection=\"horizontal\">\n      <Container onClick={handleFlip}></Container>\n\n      <ContainerBack onClick={handleFlip}>\n        <Image src={props.image}></Image>\n      </ContainerBack>\n    </ReactCardFlip>\n  );\n}\n\nconst Container = styled.div`\n  height: 150px;\n  width: 150px;\n  background-color: salmon;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 5px;\n  border-radius: 5px;\n`;\n\nconst ContainerBack = styled.div`\n  height: 150px;\n  width: 150px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 5px;\n  overflow: hidden;\n  border-radius: 5px;\n`;\n\nconst Image = styled.img`\n  width: 150px;\n`;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport styled from \"styled-components\";\n\nexport default function Cards(props) {\n  return (\n    <Board>\n      {props.pics.map((card, index) => {\n        return (\n          <Card\n            key={index}\n            image={card}\n            id={index}\n            click={props.click}\n            flip={props.flip}\n          />\n        );\n      })}\n    </Board>\n  );\n}\n\nconst Board = styled.div`\n  max-width: 750px;\n\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport UgKnuck from \"./assets/ugandanKnuckles.jpeg\";\nimport Toad from \"./assets/tum.jpg\";\nimport Luigi from \"./assets/luigi.png\";\nimport Bowser from \"./assets/bowser.jpg\";\nimport Mario from \"./assets/mario-pose4.png\";\n\nimport Cards from \"./cards/Cards\";\n\nlet matchedSaved = [];\nlet unique;\n\nclass App extends Component {\n  state = {\n    title: \"The Slightly Infuriating React Match Up Game\",\n    message: \"Click the cards to find all the pairs\",\n    picsArray: [\n      Mario,\n      UgKnuck,\n      Bowser,\n      UgKnuck,\n      Luigi,\n      Toad,\n      Luigi,\n      Toad,\n      Bowser,\n      UgKnuck,\n      Luigi,\n      Mario,\n      Toad,\n      UgKnuck,\n      Toad,\n      Luigi\n    ],\n    isFlipped: false,\n    match: [],\n    images: [],\n    lives: 8,\n    allFound: false\n  };\n\n  clickHandler = (id, image) => {\n    let matchedArray = this.state.match;\n    let imageCheck = this.state.images;\n    matchedArray.push(id);\n    imageCheck.push(image);\n\n    matchedSaved.push(id);\n\n    this.setState({\n      match: matchedArray,\n      images: imageCheck,\n      title: \"The Slightly Infuriating React Match Up Game\"\n    });\n\n    if (\n      this.state.images.length > 1 &&\n      this.state.images[0] == this.state.images[1]\n    ) {\n      unique = [...new Set(matchedSaved)];\n      if (unique.length == 16) {\n        setTimeout(() => {\n          this.setState({ allFound: true });\n        }, 1000);\n      }\n\n      this.setState({ match: [], images: [] });\n    } else if (\n      this.state.images.length > 1 &&\n      this.state.images[0] != this.state.images[1]\n    ) {\n      matchedSaved.pop();\n      matchedSaved.pop();\n\n      this.setState({ match: [], images: [] });\n      setTimeout(() => {\n        this.setState({ isFlipped: true });\n      }, 250);\n      setTimeout(() => {\n        this.setState({ isFlipped: false, lives: this.state.lives - 1 });\n        if (this.state.lives == 0) {\n          this.setState({\n            title: \"Oh no. Here's 8 more lives, cos you're shit\",\n            lives: 8\n          });\n        }\n      }, 500);\n    }\n  };\n\n  resetButton = () => {\n    matchedSaved = [];\n    this.setState({ allFound: false });\n  };\n\n  render() {\n    return (\n      <Container>\n        {this.state.allFound ? (\n          <>\n            <Win> Oh Shit, you did it.</Win>\n            <button onClick={this.resetButton}>Go Again</button>\n          </>\n        ) : (\n          <Container>\n            <div>\n              <h1>{this.state.title}</h1>\n            </div>\n            <Main>\n              <h3>Lives: {this.state.lives}</h3>\n              <Cards\n                pics={this.state.picsArray}\n                click={this.clickHandler}\n                flip={this.state.isFlipped}\n              />\n            </Main>\n            <Footer>\n              <h3>{this.state.message}</h3>\n              <Warning>\n                {\" \"}\n                Beware though, if you make a mistake you'll have to start from\n                the beginning\n              </Warning>\n            </Footer>\n          </Container>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst Warning = styled.h3`\n  color: red;\n`;\n\nconst Win = styled.h1``;\n\nconst Main = styled.div`\n  display: flex;\n  margin-left: -70px;\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tum.9879d90b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luigi.a782540d.png\";","module.exports = __webpack_public_path__ + \"static/media/bowser.69f44bd2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mario-pose4.b287c594.png\";"],"sourceRoot":""}